<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ê2 - Instant Photo Sharing</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #e0e0e0;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        /* Custom message box styling */
        .message-box {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 1rem 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }
        .message-box.show {
            opacity: 1;
        }
        .message-box.success {
            background-color: #d1fae5; /* Tailwind green-100 */
            color: #065f46; /* Tailwind green-800 */
        }
        .message-box.error {
            background-color: #fee2e2; /* Tailwind red-100 */
            color: #991b1b; /* Tailwind red-800 */
        }
        .message-box.info {
            background-color: #e0f2fe; /* Tailwind blue-100 */
            color: #1e40af; /* Tailwind blue-800 */
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            visibility: hidden;
            opacity: 0;
            transition: visibility 0s, opacity 0.3s ease-in-out;
        }
        .loading-overlay.show {
            visibility: visible;
            opacity: 1;
        }
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #ffffff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center p-4 sm:p-6 bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 text-white">

    <div id="message-box" class="message-box"></div>
    <div id="loading-overlay" class="loading-overlay">
        <div class="spinner"></div>
    </div>

    <header class="w-full max-w-4xl text-center py-6">
        <h1 class="text-5xl sm:text-6xl font-extrabold mb-4 drop-shadow-lg">ê2</h1>
        <p class="text-xl sm:text-2xl font-light italic">Share and Enjoy Pictures, Instantly!</p>
    </header>

    <main class="w-full max-w-4xl bg-white rounded-xl shadow-2xl p-6 sm:p-8 mb-8">
        <section id="upload-section" class="mb-8 p-6 bg-gray-50 rounded-lg shadow-inner border border-dashed border-gray-300">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4 text-center">Share Your Picture</h2>
            <div class="flex flex-col items-center space-y-4">
                <input type="file" id="imageInput" accept="image/*" class="hidden" onchange="handleImageSelect(event)">
                <button onclick="document.getElementById('imageInput').click()" class="bg-gradient-to-r from-teal-500 to-cyan-600 hover:from-teal-600 hover:to-cyan-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transform transition duration-300 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-teal-300">
                    <svg class="w-6 h-6 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
                    Select Image
                </button>
                <div id="fileNameDisplay" class="text-gray-600 text-sm">No file chosen</div>
                <button id="uploadButton" onclick="uploadImage()" class="w-full md:w-auto bg-gradient-to-r from-green-500 to-lime-600 hover:from-green-600 hover:to-lime-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transform transition duration-300 hover:scale-105 opacity-50 cursor-not-allowed focus:outline-none focus:ring-4 focus:ring-green-300" disabled>
                    <svg class="w-6 h-6 inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 0115.9 6L16 6a3 3 0 013 3v10a2 2 0 01-2 2H7a2 2 0 01-2-2V6a2 2 0 012-2h4"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v8m4-4H8"></path></svg>
                    Upload Picture
                </button>
            </div>
        </section>

        <section id="gallery-section">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">Shared Pictures</h2>
            <div id="imagesContainer" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Images will be loaded here -->
                <p id="noImagesMessage" class="col-span-full text-center text-gray-500 italic hidden">No images shared yet. Be the first!</p>
            </div>
        </section>
    </main>

    <footer class="mt-8 text-center text-white text-sm opacity-80">
        <p>&copy; 2024 ê2. All rights reserved.</p>
        <p>Built with ❤️ for instant sharing.</p>
    </footer>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, query, orderBy, onSnapshot } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Wrap all JavaScript logic inside DOMContentLoaded to ensure elements are ready
        document.addEventListener('DOMContentLoaded', () => {
            // Firebase configuration and initialization
            // These global variables are provided by the Canvas environment.
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};

            const app = initializeApp(firebaseConfig);
            const db = getFirestore(app);
            const auth = getAuth(app);

            let currentUser = null; // To store the authenticated user

            // --- Utility Functions ---
            function showMessage(message, type = 'info') {
                const messageBox = document.getElementById('message-box');
                // Ensure messageBox exists before trying to manipulate it
                if (messageBox) {
                    messageBox.textContent = message;
                    messageBox.className = `message-box show ${type}`;
                    setTimeout(() => {
                        messageBox.classList.remove('show');
                    }, 3000); // Hide after 3 seconds
                } else {
                    console.warn("Message box element not found.");
                }
            }

            function showLoading() {
                const loadingOverlay = document.getElementById('loading-overlay');
                if (loadingOverlay) {
                    loadingOverlay.classList.add('show');
                }
            }

            function hideLoading() {
                const loadingOverlay = document.getElementById('loading-overlay');
                if (loadingOverlay) {
                    loadingOverlay.classList.remove('show');
                }
            }

            // --- Authentication ---
            // Authenticate anonymously or with custom token on load
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    currentUser = user;
                    console.log("Firebase Auth State Changed: User is signed in:", user.uid);
                    // Listen for images once authenticated
                    listenForImages();
                } else {
                    console.log("Firebase Auth State Changed: No user is signed in. Signing in anonymously...");
                    try {
                        if (typeof __initial_auth_token !== 'undefined') {
                            // Use provided custom token for authentication
                            await signInWithCustomToken(auth, __initial_auth_token);
                        } else {
                            // Sign in anonymously if no custom token is provided
                            await signInAnonymously(auth);
                        }
                        console.log("Anonymous sign-in successful or custom token used.");
                    } catch (error) {
                        console.error("Authentication error:", error);
                        showMessage("Failed to authenticate. Please try refreshing.", "error");
                    }
                }
            });

            // --- Image Upload Logic ---
            let selectedFile = null;

            // These functions are attached to window scope as they are called from inline HTML attributes (onclick, onchange)
            window.handleImageSelect = function(event) {
                const file = event.target.files[0];
                const fileNameDisplay = document.getElementById('fileNameDisplay');
                const uploadButton = document.getElementById('uploadButton');

                if (fileNameDisplay && uploadButton) { // Ensure elements exist
                    if (file) {
                        selectedFile = file;
                        fileNameDisplay.textContent = `Selected: ${file.name} (${(file.size / 1024).toFixed(2)} KB)`;
                        uploadButton.classList.remove('opacity-50', 'cursor-not-allowed');
                        uploadButton.disabled = false;
                    } else {
                        selectedFile = null;
                        fileNameDisplay.textContent = 'No file chosen';
                        uploadButton.classList.add('opacity-50', 'cursor-not-allowed');
                        uploadButton.disabled = true;
                    }
                } else {
                    console.warn("handleImageSelect: Required DOM elements (fileNameDisplay or uploadButton) not found.");
                }
            };

            window.uploadImage = async function() {
                if (!selectedFile) {
                    showMessage("Please select an image first!", "error");
                    return;
                }

                // Basic file size check (Firestore document limit is 1MB)
                const MAX_FILE_SIZE_BYTES = 800 * 1024; // 800KB to be safe
                if (selectedFile.size > MAX_FILE_SIZE_BYTES) {
                    showMessage("Image is too large! Max size 800KB. It might not be saved.", "info");
                    // Still allow upload, but warn the user.
                }

                showLoading();

                const reader = new FileReader();
                reader.onloadend = async () => {
                    const base64Image = reader.result; // base64 string
                    const timestamp = new Date().toISOString();

                    try {
                        // Store image in the public collection
                        // Collection path: /artifacts/{appId}/public/data/images
                        const imagesCollectionRef = collection(db, `artifacts/${appId}/public/data/images`);
                        await addDoc(imagesCollectionRef, {
                            imageData: base64Image,
                            timestamp: timestamp,
                            userId: currentUser ? currentUser.uid : 'anonymous' // Record who uploaded it (anonymously)
                        });
                        showMessage("Image uploaded successfully!", "success");
                        // Clear the input and reset state
                        const imageInput = document.getElementById('imageInput');
                        if (imageInput) imageInput.value = ''; // Clear file input
                        window.handleImageSelect({ target: { files: [] } }); // Reset display
                    } catch (e) {
                        console.error("Error adding document: ", e);
                        showMessage("Error uploading image. Please try again.", "error");
                    } finally {
                        hideLoading();
                    }
                };
                reader.onerror = (error) => {
                    console.error("Error reading file:", error);
                    showMessage("Could not read the image file.", "error");
                    hideLoading();
                };
                reader.readAsDataURL(selectedFile); // Convert file to Base64
            };

            // --- Image Display Logic ---
            function listenForImages() {
                // Collection path: /artifacts/{appId}/public/data/images
                const imagesCollectionRef = collection(db, `artifacts/${appId}/public/data/images`);
                // Query to order by timestamp descending
                const q = query(imagesCollectionRef, orderBy("timestamp", "desc"));

                // Real-time listener
                onSnapshot(q, (snapshot) => {
                    const imagesContainer = document.getElementById('imagesContainer');
                    const noImagesMessage = document.getElementById('noImagesMessage');

                    // Check if elements exist before manipulating them
                    if (!imagesContainer || !noImagesMessage) {
                        console.error("DOM elements (imagesContainer or noImagesMessage) not found when onSnapshot fired. Skipping update.");
                        return; // Exit if elements are not ready
                    }

                    imagesContainer.innerHTML = ''; // Clear existing images

                    if (snapshot.empty) {
                        noImagesMessage.classList.remove('hidden');
                    } else {
                        noImagesMessage.classList.add('hidden');
                        snapshot.forEach((doc) => {
                            const imageData = doc.data();
                            const imageUrl = imageData.imageData;
                            const timestamp = imageData.timestamp ? new Date(imageData.timestamp).toLocaleString() : 'N/A';
                            const uploaderId = imageData.userId || 'anonymous'; // Display the uploader ID

                            const imageCard = `
                                <div class="bg-white rounded-xl shadow-md overflow-hidden transform transition duration-300 hover:scale-102 flex flex-col items-center p-4">
                                    <img src="${imageUrl}" alt="Shared Image" class="w-full h-48 object-cover rounded-lg mb-4 border border-gray-200">
                                    <div class="text-gray-700 text-sm w-full text-center">
                                        <p class="font-semibold text-xs text-gray-500">Uploaded by: <span class="break-all">${uploaderId}</span></p>
                                        <p class="text-xs text-gray-500">on ${timestamp}</p>
                                    </div>
                                </div>
                            `;
                            imagesContainer.innerHTML += imageCard;
                        });
                    }
                }, (error) => {
                    console.error("Error listening for images:", error);
                    showMessage("Error loading images. Please try refreshing.", "error");
                });
            }
        }); // End of DOMContentLoaded
    </script>
</body>
</html>
